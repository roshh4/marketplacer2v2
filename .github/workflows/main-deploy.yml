name: Build and Deploy - Main Branch

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AZURE_RESOURCE_GROUP: rg-marketplace-dev
  AZURE_LOCATION: southeastasia

jobs:
  build-and-deploy-backend:
    runs-on: ubuntu-latest
    outputs:
      backend-url: ${{ steps.terraform-output.outputs.backend_url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Generate version tag
      id: version
      run: |
        VERSION=$(date +%Y%m%d)-$(echo ${{ github.sha }} | cut -c1-7)
        echo "version=v${VERSION}" >> $GITHUB_OUTPUT
        echo "Generated version: v${VERSION}"
        
    - name: Build and push backend with version tag
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: |
          roshh4/marketplace-backend-alpine-amd64:latest
          roshh4/marketplace-backend-alpine-amd64:${{ steps.version.outputs.version }}
        platforms: linux/amd64
        
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0
        terraform_wrapper: false
        
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: |
          {
            "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
            "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}",
            "subscriptionId": "${{ secrets.AZURE_SUBSCRIPTION_ID }}",
            "tenantId": "${{ secrets.AZURE_TENANT_ID }}"
          }
          
    - name: Verify clean environment
      run: |
        echo "Current Azure account:"
        az account show --query "{subscriptionId:id, name:name, user:user.name}" --output table
        
        echo "Current resources:"
        az resource list --query "[].{name:name, type:type, resourceGroup:resourceGroup}" --output table
          
    - name: Terraform Init
      run: |
        cd terraform
        terraform init
        
    - name: Import existing resources (if they exist)
      run: |
        cd terraform
        
        # Try to import existing resources, ignore errors if they don't exist
        terraform import -var="db_admin_password=${{ secrets.DB_PASSWORD }}" -var="container_image_tag=${{ steps.version.outputs.version }}" azurerm_resource_group.marketplace "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/rg-marketplace-dev" || true
        
        terraform import -var="db_admin_password=${{ secrets.DB_PASSWORD }}" -var="container_image_tag=${{ steps.version.outputs.version }}" azurerm_container_app_environment.marketplace "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/rg-marketplace-dev/providers/Microsoft.App/managedEnvironments/cae-marketplace-dev" || true
        
        terraform import -var="db_admin_password=${{ secrets.DB_PASSWORD }}" -var="container_image_tag=${{ steps.version.outputs.version }}" azurerm_postgresql_flexible_server.marketplace "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/rg-marketplace-dev/providers/Microsoft.DBforPostgreSQL/flexibleServers/psql-marketplace-dev" || true
        
        terraform import -var="db_admin_password=${{ secrets.DB_PASSWORD }}" -var="container_image_tag=${{ steps.version.outputs.version }}" azurerm_postgresql_flexible_server_database.marketplace "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/rg-marketplace-dev/providers/Microsoft.DBforPostgreSQL/flexibleServers/psql-marketplace-dev/databases/marketplace" || true
        
        terraform import -var="db_admin_password=${{ secrets.DB_PASSWORD }}" -var="container_image_tag=${{ steps.version.outputs.version }}" azurerm_postgresql_flexible_server_firewall_rule.azure_services "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/rg-marketplace-dev/providers/Microsoft.DBforPostgreSQL/flexibleServers/psql-marketplace-dev/firewallRules/AllowAzureServices" || true
        
        terraform import -var="db_admin_password=${{ secrets.DB_PASSWORD }}" -var="container_image_tag=${{ steps.version.outputs.version }}" azurerm_container_app.marketplace_backend "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/rg-marketplace-dev/providers/Microsoft.App/containerApps/ca-marketplace-backend-dev" || true
        
    - name: Terraform Plan
      run: |
        cd terraform
        terraform plan \
          -var="db_admin_password=${{ secrets.DB_PASSWORD }}" \
          -var="container_image_tag=${{ steps.version.outputs.version }}"
          
    - name: Terraform Apply
      run: |
        cd terraform
        terraform apply -auto-approve \
          -var="db_admin_password=${{ secrets.DB_PASSWORD }}" \
          -var="container_image_tag=${{ steps.version.outputs.version }}"
          
    - name: Get Backend URL
      id: terraform-output
      run: |
        cd terraform
        BACKEND_URL=$(terraform output -raw container_app_url)
        echo "backend_url=${BACKEND_URL}" >> $GITHUB_OUTPUT
        echo "Backend URL: ${BACKEND_URL}"

  build-and-deploy-frontend:
    runs-on: ubuntu-latest
    needs: build-and-deploy-backend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: './frontend/package-lock.json'
        
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Build frontend with backend URL
      run: |
        cd frontend
        echo "VITE_API_URL=${{ needs.build-and-deploy-backend.outputs.backend-url }}" > .env.production
        npm run build
        
    - name: Deploy to Azure Static Web Apps
      if: secrets.AZURE_STATIC_WEB_APPS_API_TOKEN != ''
      uses: Azure/static-web-apps-deploy@v1
      with:
        azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        action: "upload"
        app_location: "./frontend"
        output_location: "dist"
        
    - name: Frontend deployment status
      run: |
        if [ -n "${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}" ]; then
          echo "✅ Frontend deployed to Static Web App"
          echo "Frontend URL: https://ashy-coast-049069600.2.azurestaticapps.net"
        else
          echo "⚠️ Frontend deployment skipped - AZURE_STATIC_WEB_APPS_API_TOKEN not set"
          echo "Add the Static Web App deployment token to GitHub secrets"
        fi